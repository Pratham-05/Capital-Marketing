DROP TABLE `SHARES_BOUGHT`;
DROP TABLE `SHARES_AVAILABLE`;
DROP TABLE `USER`;
DROP TABLE `COMPANY`;
DROP TABLE `loan`;
DROP TABLE `employee`;
DROP TABLE `branch`;


CREATE TABLE `branch` (
  `bcode` INTEGER PRIMARY KEY AUTO_INCREMENT,
  `bname` VARCHAR(255) NOT NULL,
  `baddress` VARCHAR(255) NOT NULL
);

CREATE TABLE `employee` (
  `eid` INTEGER PRIMARY KEY AUTO_INCREMENT,
  `ename` VARCHAR(255) NOT NULL,
  `egender` VARCHAR(255) NOT NULL,
  `eaddress` VARCHAR(255) NOT NULL,
  `date_of_birth` DATE,
  `BCODE` INT NOT NULL,
  `BRANCH_NAME` VARCHAR(40),
  `DEPARTMENT` VARCHAR(40) NOT NULL,
  `SALARY` INT NOT NULL,
  FOREIGN KEY(`BCODE`) REFERENCES `BRANCH`(`BCODE`) ON DELETE CASCADE
);

CREATE TABLE `loan` (
  `lid` INTEGER PRIMARY KEY AUTO_INCREMENT,
  `LAMOUNT` INTEGER,
  `Ltype` VARCHAR(25),
  `bcode` INTEGER NOT NULL,
  FOREIGN KEY (`bcode`) REFERENCES `branch`(`bcode`) ON DELETE CASCADE
  );

CREATE TABLE `COMPANY`(
    `CID`INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    `CNAME` VARCHAR(40) UNIQUE NOT NULL,
    `ACC_HOLDER_NAME` VARCHAR(40) NOT NULL,
    `ACC_NO` BIGINT UNIQUE NOT NULL,
    `BANK_NAME` VARCHAR(30) NOT NULL,
    `COM_ADDRESS` VARCHAR(50) NOT NULL,
    `MOBILE_NO` BIGINT ,
    `EMAIL_ID` VARCHAR(30) NOT NULL,
    `LOANID` INT UNIQUE
);

ALTER TABLE `COMPANY`
ADD CONSTRAINT FOREIGN KEY (`LOANID`) REFERENCES `loan`(`lid`) ON DELETE CASCADE;

CREATE TABLE `USER`(
 `UID`INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    `UNAME` VARCHAR(40) NOT NULL,
    `ACC_HOLDER_NAME` VARCHAR(40) NOT NULL,
    `ACC_NO` BIGINT UNIQUE NOT NULL,
    `BANK_NAME` VARCHAR(30) NOT NULL,
    `USER_ADDRESS` VARCHAR(50) NOT NULL,
    `MOBILE_NO` BIGINT ,
    `EMAIL_ID` VARCHAR(30) NOT NULL,
    `LOANID` INT UNIQUE
);

ALTER TABLE `USER`
ADD CONSTRAINT FOREIGN KEY (`LOANID`) REFERENCES `loan`(`lid`) ON DELETE CASCADE;

CREATE TABLE `SHARES_AVAILABLE`(
  `CID` INT UNIQUE NOT NULL,
  `CNAME` VARCHAR(40) NOT NULL,
  `NO_OF_SHARES` INT NOT NULL,
  `WORTH_OF_EACH_SHARE` INT NOT NULL
);

ALTER TABLE `SHARES_AVAILABLE`
ADD CONSTRAINT FOREIGN KEY (`CID`) REFERENCES `COMPANY`(`CID`) ON DELETE CASCADE;

ALTER TABLE `SHARES_AVAILABLE`
ADD CONSTRAINT FOREIGN KEY (`CNAME`) REFERENCES `COMPANY`(`CNAME`) ON DELETE CASCADE;

CREATE TABLE `SHARES_BOUGHT`(
 `CID` INT UNIQUE NOT NULL,
 `UID` INT UNIQUE NOT NULL,
 `WORTH_OF_SHARE` INT NOT NULL,
 `DATE_OF_PURCHASE` DATE NOT NULL,
 FOREIGN KEY (`CID`) REFERENCES `COMPANY`(`CID`) ON DELETE CASCADE,
 FOREIGN KEY (`UID`) REFERENCES `USER`(`UID`) ON DELETE CASCADE
);

INSERT INTO `BRANCH` VALUES("001","HYDERABAD BRANCH","5TH STREET,LINGAMPALLY, HYDERABAD");
INSERT INTO `BRANCH` VALUES("002","BENGALURU BRANCH","7-5-345,BANASHANKARI,BEGALURU");
INSERT INTO `BRANCH` VALUES("003","MUMBAI BRANCH","BANDAR KURLA COMPLEX RD,MUMBAI");

INSERT INTO `EMPLOYEE` VALUES ("001","RAMESH","MALE","GB COLONY,BENGALURU","1986-10-03","001","BENGALURU BRANCH","SHARES","50000");
INSERT INTO `EMPLOYEE` VALUES ("002","KAMALA","FEMALE","ISK COLONY,BENGALURU","1990-03-25","001","BENGALURU BRANCH","LOAN","67000");
INSERT INTO `EMPLOYEE` VALUES ("003","RAGINI","FEMALE","RAM COLONY,BENGALURU","1995-01-10","003","MUMBAI BRANCH","LOAN","55000");

INSERT INTO `LOAN` VALUES ("001","50000","BUSINESS","001");
INSERT INTO `LOAN` VALUES ("002","100000","HOUSE","001");
INSERT INTO `LOAN` VALUES ("003","500000","BUSINESS","003");
INSERT INTO `LOAN` VALUES ("004","200000","BUSINESS","003");

INSERT INTO `COMPANY` VALUES ("001","RAJURI STEELS LTD","RAJURI STEELS","3900545659","SBI","FARIDABAD,DELHI","227898","rajuristeels@gmail.com","004");
INSERT INTO `COMPANY` VALUES ("002","ACC LTD","ASSOCIATED CEMENT COMPANIES","3300655993","UNION BANK","DADAR,MUMBAI","7678590123","accltd@gmail.com","003");

INSERT INTO `USER` VALUES ("001","RAJESH","RAJESH HOSALLI","3500677892","PUNJAB NATIONAL BANK","FBI COLONY,KAZIPET,KARNATAKA","8686975461","rajeshh@gmail.com","001");
INSERT INTO `USER` VALUES ("002","AHALYA RAGHAV","AHALYA RAGHAV","3609543221","CANARA BANK","POLICE COLONY,RAMPET,CHENNAI","7751688944","ahalya@gmail.com","002");

INSERT INTO `SHARES_AVAILABLE` VALUES ("001","RAJURI STEELS LTD","20","20000");
INSERT INTO `SHARES_AVAILABLE` VALUES ("002","ACC LTD","16","40000");

INSERT INTO `SHARES_BOUGHT` VALUES ("001","002","20000","2020-12-04");
INSERT INTO `SHARES_BOUGHT` VALUES ("002","001","40000","2018-02-28");

-- SIMPLE

SELECT * FROM `BRANCH`;
SELECT `CID`,`CNAME` FROM `COMPANY`;

SELECT `UID` FROM `USER`
WHERE `LOANID`= "001";

SELECT `EID`,`ENAME` FROM `EMPLOYEE`
WHERE `BCODE`="001" AND `DEPARTMENT`="SHARES";

SELECT `EID`,`ENAME` FROM `EMPLOYEE`
WHERE `BCODE`="001" OR `DEPARTMENT`="SHARES";

-- NESTED

SELECT `UID` FROM `USER`
WHERE `LOANID` IN (SELECT `LID` FROM `LOAN` WHERE `LOAN`.`BCODE`="001");

SELECT `EID`,`ENAME` FROM `EMPLOYEE`
WHERE `SALARY`>(SELECT AVG(`SALARY`) FROM `EMPLOYEE`);

SELECT * FROM `SHARES_BOUGHT`
WHERE (SELECT `UID` FROM `USER` WHERE `LOANID`="001");

-- SET OPERATORS

SELECT * FROM `LOAN` 
WHERE `LTYPE` = "BUSINESS"
UNION
SELECT * FROM `LOAN` 
WHERE `BCODE` = "001";

-- (SELECT * FROM `LOAN` 
-- WHERE `LTYPE` = `BUSINESS`)
-- EXCEPT
-- (SELECT * FROM `LOAN` 
-- WHERE `BCODE` = `001`);

-- GROUP BY
SELECT * FROM `USER`
GROUP BY `UNAME`;

-- HAVING
SELECT COUNT(`LID`),`BCODE`
FROM `LOAN`
GROUP BY `BCODE`
HAVING COUNT(`LID`)<10;

-- EXISTS AND NOT EXISTS
SELECT `LID`
FROM `LOAN`
WHERE EXISTS (SELECT `UID` FROM `USER` WHERE `LOAN`.`LAMOUNT`< "70000");

SELECT `LID`
FROM `LOAN`
WHERE NOT EXISTS (SELECT `UID` FROM `USER` WHERE `LOAN`.`LAMOUNT`< "70000");

-- AGGREGATE FUNCTIONS

SELECT COUNT(`EID`)
FROM `EMPLOYEE`
WHERE `DEPARTMENT`="LOAN";

SELECT AVG(`SALARY`)
FROM `EMPLOYEE`
WHERE `SALARY`>"50000";

SELECT SUM(`SALARY`)
FROM `EMPLOYEE`;

SELECT MAX(`SALARY`)
FROM `EMPLOYEE`;

-- LIKE AND BETWEEN

SELECT * FROM `COMPANY` WHERE `CNAME` LIKE "R%";
SELECT * FROM `USER` WHERE `UNAME` LIKE "%A__";
SELECT * FROM `EMPLOYEE` WHERE `SALARY` BETWEEN "54000" AND "70000";

-- CORELATED QUERIES

SELECT `UID` FROM `USER`
WHERE `LOANID` IN (SELECT `LID` FROM `LOAN` WHERE `LOAN`.`BCODE`="001");

-- VIEW
 -- CREATING VIEW 
CREATE VIEW `SALARY` AS
SELECT `EID`,`SALARY` FROM `EMPLOYEE`;

-- UPDATING THE VIEW

CREATE OR REPLACE VIEW `SALARY` AS
SELECT `ENAME` 
FROM `EMPLOYEE`;

-- DROPPING A VIEW
DROP VIEW `SALARY`;

-- TRIGGER

-- CREATE TRIGGER `LOAN_LIMIT`
-- BEFORE INSERT ON `LOAN`
-- FOR EACH ROW
-- BEGIN
 -- IF (`LTYPE` = `HOUSE`)THEN
   -- IF(`LAOUNT`>`200000`)THEN
   --  RAISERROR (
  -- END IF
   